<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>微服务 on Lionel's Blog</title><link>https://lionel0806.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><description>Recent content in 微服务 on Lionel's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" />&lt;/a>&lt;br />本作品采用&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a>进行许可。</copyright><lastBuildDate>Thu, 22 Apr 2021 21:12:55 +0800</lastBuildDate><atom:link href="https://lionel0806.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>Dapr中的Actor模型</title><link>https://lionel0806.github.io/posts/dapr%E4%B8%AD%E7%9A%84actor%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 22 Apr 2021 21:12:55 +0800</pubDate><guid>https://lionel0806.github.io/posts/dapr%E4%B8%AD%E7%9A%84actor%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>原文链接：https://docs.dapr.io/developing-applications/building-blocks/actors/actors-overview/&lt;/p>
&lt;h2 id="介紹">介紹&lt;/h2>
&lt;p>Actor模型将Actor描述为最低层次的 &amp;ldquo;计算单元&amp;rdquo;。换句话说，你把代码写在一个独立的单元（称为Actor）中，这个单元每次接收消息并处理它们，没有任何并发或线程。&lt;/p>
&lt;p>当你的代码处理一条消息时，它可以发送一条或多条消息给其他Actor，或者创建新的Actor。底层运行时管理每个Actor的运行方式、时间和地点，并在角色之间路由消息。&lt;/p>
&lt;p>大量的actor可以同时执行，而且actor之间可以独立执行。&lt;/p>
&lt;p>Dapr包括一个专门实现虚拟Actor模式的运行时。通过Dapr的实现，你可以根据Actor模式编写Dapr的actors，Dapr利用底层平台提供可扩展性和可靠性保证。&lt;/p></description></item></channel></rss>
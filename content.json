{"meta":{"title":"Lionel's Blog","subtitle":null,"description":null,"author":"归零","url":"http://lionel0806.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-06-13T01:57:51.860Z","updated":"2019-06-12T18:12:39.000Z","comments":true,"path":"404.html","permalink":"http://lionel0806.github.io/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"我的朋友们","date":"2019-06-13T01:57:51.860Z","updated":"2019-06-12T18:10:44.000Z","comments":true,"path":"friends/index.html","permalink":"http://lionel0806.github.io/friends/index.html","excerpt":"","text":"这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"关于","date":"2019-06-13T02:38:40.456Z","updated":"2019-06-13T02:38:40.462Z","comments":true,"path":"about/index.html","permalink":"http://lionel0806.github.io/about/index.html","excerpt":"","text":"要么忙着生活，要么赶着去死！"},{"title":"所有标签","date":"2019-06-13T01:57:51.860Z","updated":"2019-06-12T18:09:32.000Z","comments":true,"path":"blog/tags/index.html","permalink":"http://lionel0806.github.io/blog/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-06-13T01:57:51.860Z","updated":"2019-06-12T18:09:01.000Z","comments":true,"path":"blog/categories/index.html","permalink":"http://lionel0806.github.io/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"基于v2ray的翻墙服务搭建","slug":"blog/基于v2ray的翻墙服务搭建","date":"2019-06-18T12:18:46.000Z","updated":"2019-06-18T12:41:44.521Z","comments":true,"path":"blog/基于v2ray的翻墙服务搭建/","link":"","permalink":"http://lionel0806.github.io/blog/基于v2ray的翻墙服务搭建/","excerpt":"一. 服务器配置 阿里云香港 1Core 25G 限速30Mps ubuntu 16.04 二. 安装步骤1. 安装加速:123 wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh Note: 内核版本选择 4.14内核（其他内核无法启动）","text":"一. 服务器配置 阿里云香港 1Core 25G 限速30Mps ubuntu 16.04 二. 安装步骤1. 安装加速:123 wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh Note: 内核版本选择 4.14内核（其他内核无法启动） 2. 安装v2ray123bash &lt;(curl -L -s https://install.direct/go.sh)service v2ray start 3. 配置服务端(参考:https://github.com/veekxt/v2ray-template):考虑到客户端的选择性，我这里选择tcp + shadowsocks 协议。 3.1 服务端配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; \"log\": &#123; \"access\": \"/var/log/v2ray/access.log\", \"error\": \"/var/log/v2ray/error.log\", \"loglevel\": \"warning\" &#125;, \"dns\": &#123;&#125;, \"stats\": &#123;&#125;, \"inbounds\": [ &#123; \"port\": 14013, \"protocol\": \"shadowsocks\", \"settings\": &#123; \"email\": \"\", \"method\": \"aes-256-cfb\", \"password\": \"\", ##密码 \"level\": 0, \"ota\": false, \"network\": \"tcp,udp\" &#125;, \"tag\": \"in-0\", \"streamSettings\": &#123; \"network\": \"tcp\", \"security\": \"none\", \"tcpSettings\": &#123;&#125; &#125; &#125; ], \"outbounds\": [ &#123; \"tag\": \"direct\", \"protocol\": \"freedom\", \"settings\": &#123;&#125; &#125;, &#123; \"tag\": \"blocked\", \"protocol\": \"blackhole\", \"settings\": &#123;&#125; &#125; ], \"routing\": &#123; \"domainStrategy\": \"AsIs\", \"rules\": [ &#123; \"type\": \"field\", \"ip\": [ \"geoip:private\" ], \"outboundTag\": \"blocked\" &#125; ] &#125;, \"policy\": &#123;&#125;, \"reverse\": &#123;&#125;, \"transport\": &#123;&#125;&#125; 3.2 客户端配置:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&#123; \"log\":&#123;&#125;, \"dns\":&#123;&#125;, \"stats\":&#123;&#125;, \"inbounds\":[ &#123; \"port\":\"1080\", \"protocol\":\"socks\", \"settings\":&#123; \"auth\":\"noauth\", \"udp\":true &#125;, \"tag\":\"in-0\" &#125;, &#123; \"port\":\"1081\", \"protocol\":\"http\", \"settings\":&#123;&#125;, \"tag\":\"in-1\" &#125; ], \"outbounds\":[ &#123; \"protocol\":\"shadowsocks\", \"settings\":&#123; \"servers\":[ &#123; \"email\":\"\", \"address\":\"\", \"port\":2222, \"method\":\"aes-256-cfb\", \"password\":\"\", \"ota\":false, \"level\":0 &#125; ] &#125;, \"tag\":\"out-0\", \"streamSettings\":&#123; \"network\":\"tcp\", \"security\":\"none\", \"tcpSettings\":&#123;&#125; &#125; &#125;, &#123; \"tag\":\"direct\", \"protocol\":\"freedom\", \"settings\":&#123;&#125; &#125;, &#123; \"tag\":\"blocked\", \"protocol\":\"blackhole\", \"settings\":&#123;&#125; &#125; ], \"routing\":&#123; \"domainStrategy\":\"IPOnDemand\", \"rules\":[ &#123; \"type\":\"field\", \"ip\":[ \"geoip:private\" ], \"outboundTag\":\"direct\" &#125; ] &#125;, \"policy\":&#123;&#125;, \"reverse\":&#123;&#125;, \"transport\":&#123;&#125;&#125;","categories":[{"name":"工具","slug":"工具","permalink":"http://lionel0806.github.io/blog/categories/工具/"},{"name":"教程","slug":"工具/教程","permalink":"http://lionel0806.github.io/blog/categories/工具/教程/"}],"tags":[{"name":"vpn","slug":"vpn","permalink":"http://lionel0806.github.io/blog/tags/vpn/"},{"name":"翻墙","slug":"翻墙","permalink":"http://lionel0806.github.io/blog/tags/翻墙/"}]},{"title":"“机器学习通用工作流程”","slug":"blog/ml-general-workflow","date":"2019-06-10T03:30:22.000Z","updated":"2019-06-13T02:49:55.854Z","comments":true,"path":"blog/ml-general-workflow/","link":"","permalink":"http://lionel0806.github.io/blog/ml-general-workflow/","excerpt":"机器学习的通用工作流程总结为如下几个步骤： 1. 定义问题，收集数据集首先我们必须先定义多面对的问题。1) 输入的数据是什么？你要预测什么？2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。同时做出如下假设： 假设输出可以根据输入进行预测 假设可用数据包含足够多的信息，足以学习输入和输出之间的关系","text":"机器学习的通用工作流程总结为如下几个步骤： 1. 定义问题，收集数据集首先我们必须先定义多面对的问题。1) 输入的数据是什么？你要预测什么？2) 你面对的是什么类型的问题？二分类问题、多分类问题、标量回归问题向量回归问题还是其他问题，确定问题类型，有助于选择模型架构，损失函数。同时做出如下假设： 假设输出可以根据输入进行预测 假设可用数据包含足够多的信息，足以学习输入和输出之间的关系 2. 选择衡量成功的指标要控制一件事物，就需要能够观察它。要取得成功，就必须给出成功的定义：精度？准确率和召回率，客户保留率？衡量成功的指标将指引你选择损失函数，即模型要优化什么。对于平衡分类问题，精度和接受者操作特征曲线下面积是常用指标。对于类别不平衡问题，可以使用准确率和召回率。对于排序和多标签分类问题，可以使用平均准确率和召回率。也可以自定义衡量成功的标准。 3. 确定评估方法一旦明确了目标，必须确定如何衡量当前的进展，以下三种常见的评估方法：1) 留出验证集，数据量很大时可以使用这种方法。2) K折交叉验证， 如果留出验证的样本太少，无法保证可靠性，可以选择这种方法。3) 重复的K折验证，如果可用的数据很少，同时模型评估有需要非常准确，那么应该使用这种方法。只需选择以上三种之一即可。 4. 准备数据一旦知道了要训练什么，要优化什么以及评估方法，那么就已经准备好训练模型了。但首先应该将数据格式化，使其可以输入到机器学习模型中。1) 将数据格式化为张量2) 这些张量的取值通常应该缩放为较小的值，比如在【-1， 1】区间或者【0， 1】3) 如果不同的特征具有不同的取值范围，那么应该做数据标准化。4) 可能需要做特征工程， 尤其对于小数据集准备好数据数据和目标数据的张量后，就可以开始训练模型了。 5. 开发比基准更好的模型这一阶段的目标是获得统计功效，即开发一个小型模型，可以打败纯随机的基准。注意，不一定总能获得统计功效，如果尝试多种合理的架构之后仍然无法打败随机基准，那么可能问题的答案并不在输入数据中， 也就是前面的两个假设成立。 这些假设可能是错误的，这样的话需要重新开始，如果一切都顺利，需要选择三个关键参数来构建第一个工作模型。1) 最后一层的激活函数2) 损失函数，损失函数应该匹配要解决的问题类型。3) 优化配置，你要使用那种优化器？学习率是多少？ 大多数情况下，rmsprop及其默认的学习率是稳妥 的。 6. 扩大模型规模，开发过拟合的模型一旦得到了具有统计功效的模型，问题就变成了模型是否足够强大？他是否具有足够多的层和参数来对问题进行建模？通过：1) 添加更多的层2) 让每一层变得更大3) 训练更多的轮次来得到过拟合的模型。要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模型在验证数据上的性能开始下降，那么就出现了过拟合。 7. 模型正则化与调节超参数这一步是最费时间的，你将不断的调节模型，在验证数据上评估，再次调节模型，然后重复这一过程。直到模型达到最佳性能。应该尝试以下：1) 添加dropout2) 尝试不同架构，增加或减少层数3) 添加L1或L2正则化4) 尝试不同的超参数（比如美称的单元数或优化器的学习率），以找到最佳配置5) （可选）反复做特征工程，添加新特性或删除美后信息的特征","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"“机器学习”","slug":"“机器学习”","permalink":"http://lionel0806.github.io/blog/tags/“机器学习”/"},{"name":"“深度学习”","slug":"“深度学习”","permalink":"http://lionel0806.github.io/blog/tags/“深度学习”/"}]},{"title":"Pandas","slug":"blog/pandas","date":"2019-04-10T06:58:49.000Z","updated":"2019-06-13T02:50:01.101Z","comments":true,"path":"blog/pandas/","link":"","permalink":"http://lionel0806.github.io/blog/pandas/","excerpt":"Pandas 速查手册对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。 Pandas包导入12import pandas as pdimport numpy as np","text":"Pandas 速查手册对于数据科学家，无论是数据分析还是数据挖掘，如果用 Python作为工具，Pandas是一个非常重要的Python包，它不仅提供了很多方法，是的数据处理变得非常简单，同时由于底层使用Numpy，使得数据处理的速度也很快，比Python内置的方法有很大优势。 Pandas包导入12import pandas as pdimport numpy as np 数据导入 pd.read_csv(filename) 读取csv文件 pd.read_table(filename) 从限定分隔符的文本文件中导入数据 pd.read_excel(filename) 从excel文件中导入数据 pd.read_sql(query, connection_object) 从sql表/库中导入数据 pd.read_json(json_string) 从json格式的字符串中导入数据 未完待续……","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"Pandas","slug":"Pandas","permalink":"http://lionel0806.github.io/blog/tags/Pandas/"},{"name":"数据分析","slug":"数据分析","permalink":"http://lionel0806.github.io/blog/tags/数据分析/"}]},{"title":"Swift条件展开初始化","slug":"blog/conditional-unwrapping-initialization","date":"2016-09-05T16:00:00.000Z","updated":"2019-06-13T02:48:25.218Z","comments":true,"path":"blog/conditional-unwrapping-initialization/","link":"","permalink":"http://lionel0806.github.io/blog/conditional-unwrapping-initialization/","excerpt":"原文链接：Idiomatic Swift: conditional unwrapping initialization Swift-Users上，Dan T 问：目前我这样写： 1234567let dobString: Stringif let dob = dob &#123; dobString = serverDateFormatter.stringFromDate(dob)&#125;else &#123; dobString = &quot;&quot;&#125; 有没有更好，更通用的方法实现同样的功能？","text":"原文链接：Idiomatic Swift: conditional unwrapping initialization Swift-Users上，Dan T 问：目前我这样写： 1234567let dobString: Stringif let dob = dob &#123; dobString = serverDateFormatter.stringFromDate(dob)&#125;else &#123; dobString = &quot;&quot;&#125; 有没有更好，更通用的方法实现同样的功能？ 我假设serverDateFormatter是NSDateFormatter的实例，这样的话，Dan这样写会更好： 1234let dobString: String = &#123; guard let dob = dob else &#123; return &quot;&quot; &#125; return serverDateFormatter.string(from: dob)&#125; 我认为这样写更清晰，dobString只出现了一次。（如果他没有用NSDateFormatter，并且需要第二层展开，guard let语句需要第二个分句来执行条件绑定在stringFromDate返回的结果上）。 Update：Tim Vermeulen 有更漂亮的一行代码解决方案： 1let dobString = dob.flatMap(serverDateFormatter.stringFromDate) ?? &quot;&quot; 我很确定以上代码中flatMap可以用map代替，这样可以节约四个字符。你有更好的方案？可以在评论里留言，发推文，或者发到Swift-Users 邮件列表。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://lionel0806.github.io/blog/tags/Swift/"},{"name":"翻译","slug":"翻译","permalink":"http://lionel0806.github.io/blog/tags/翻译/"}]},{"title":"如何使用curl进行http请求","slug":"blog/how-to-use-curl","date":"2016-08-31T16:00:00.000Z","updated":"2019-06-13T02:49:02.484Z","comments":true,"path":"blog/how-to-use-curl/","link":"","permalink":"http://lionel0806.github.io/blog/how-to-use-curl/","excerpt":"如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。","text":"如今的互联网时代，我们在日常开发中经常需要测试HTTP[S] API，有一些含用户界面的工具使用很方便，如Chrome插件Postman等。 但作为码农的我们有时候会觉得带图形的东西还不如命令行下敲一段命令来的简便，今天介绍一款可以在命令行下测试API的工具curl。 curl是什么？curl是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。curl支持的通信协议有FTP、FTPS、HTTP、HTTPS、TFTP、SFTP、Gopher、SCP、Telnet、DICT、FILE、LDAP、LDAPS、IMAP、POP3、SMTP和RTSP。(来自wikipedia) HTTP 请求1.POST请求123456curl -H &quot;Content-Type: application/json&quot; -X POST -d \\ &apos;&#123; &quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;, ...... &#125;&apos; http://localhost:3000/ 参数说明：-H: 表示后面紧跟请求头部参数-X: 后面紧跟请求指令，如:GET/POST/DELETE/PUT/UPDATE等，没有此参数时默认是GET请求。-d: 后紧跟HTTP POST 数据。 2. GET请求1curl -X GET http://localhost:3000/ 或者 1curl http://localhost:3000/ NOTE:可用此命令查看网页源码，如： 1curl www.google.com 3. DELETE请求1curl -X DELETE http://localhost:3000/","categories":[{"name":"工具","slug":"工具","permalink":"http://lionel0806.github.io/blog/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://lionel0806.github.io/blog/tags/工具/"}]},{"title":"ReactiveCocoa中的基本算子","slug":"blog/basic-operators","date":"2016-08-13T16:00:00.000Z","updated":"2019-06-13T02:47:54.136Z","comments":true,"path":"blog/basic-operators/","link":"","permalink":"http://lionel0806.github.io/blog/basic-operators/","excerpt":"原文链接: Basic Operators 这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。 事件流副作用观察（Observation）Signal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。 123456789101112signal.observe(Signal.Observer &#123; event in switch event &#123; case let .Next(next): print(&quot;Next: \\(next)&quot;) case let .Failed(error): print(&quot;Failed: \\(error)&quot;) case .Completed: print(&quot;Completed&quot;) case .Interrupted: print(&quot;Interrupted&quot;) &#125;&#125;)","text":"原文链接: Basic Operators 这个文档解释ReactiveCocoa中最常用的Operator，以及一些用例。注意Operators，在这里指的是signal和signal producers之间的转换，不是Swift中的操作符，换句话说，这些是ReactiveCocoa提供处理事件流的组合原语。该文档使用术语“事件流”来描述Signal和SignalProducer的概念。 事件流副作用观察（Observation）Signal可以被观察通过observe函数，需要一个Observer作为参数，任何事件流都会发送给它。 123456789101112signal.observe(Signal.Observer &#123; event in switch event &#123; case let .Next(next): print(&quot;Next: \\(next)&quot;) case let .Failed(error): print(&quot;Failed: \\(error)&quot;) case .Completed: print(&quot;Completed&quot;) case .Interrupted: print(&quot;Interrupted&quot;) &#125;&#125;) 或者可以用Next, Failed, Completed 和Interrupted事件的回调函数，当相应的事件发生时它（回调函数）会被调用。 123456789101112signal.observeNext &#123; next in print(&quot;Next: \\(next)&quot;)&#125;signal.observeFailed &#123; error in print(&quot;Failed: \\(error)&quot;)&#125;signal.observeCompleted &#123; print(&quot;Completed&quot;)&#125;signal.observeInterrupted &#123; print(&quot;Interrupted&quot;)&#125; 注意可以不用观察所有四种类型的事件，因为参数是可选类型, 你只需要给你关心的事件提供回调函数。 Injecting effectsSignalProducer会引入副作用，当使用on操作符但没有实际订阅它。 123456789101112131415161718let producer = signalProducer .on(started: &#123; print(&quot;Started&quot;) &#125;, event: &#123; event in print(&quot;Event: \\(event)&quot;) &#125;, failed: &#123; error in print(&quot;Failed: \\(error)&quot;) &#125;, completed: &#123; print(&quot;completed&quot;) &#125;, interrupted: &#123; print(&quot;interrupted&quot;) &#125;, terminated: &#123; print(&quot;Terminated&quot;) &#125;, disposed: &#123; print(&quot;Disposed&quot;) &#125;, next: &#123; value in print(&quot;Next: \\(value)&quot;) &#125;) 与observe类似，你只需要给你关心的事件提供回调函数。注意不会有任何打印直到producer调用started（也许再其他任何地方调用started）。 组合算子（Operator composition）Lifting转换事件流以下操作符可以将一个事件流转换成一个新的事件流。 Mappingmap用于事件流中所有的值，然后将结果创建成一个新的流。 123456789let (signal, observer) = Signal&lt;String, NoError&gt;.pipe()signal .map&#123; string in string.uppercaseString &#125; .observeNext &#123; next in print(next) &#125; observer.sendNext(&quot;a&quot;) //Prints A observer.sendNext(&quot;c&quot;) //Prints B observer.sendNext(&quot;c&quot;) //Prints C Filteringfilter 用于包含满足一定条件的事件流的值。 12345678910let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()signal .filter &#123; number in number % 2 == 0 &#125; .observeNext &#123; next in print(next) &#125;observer.sendNext(1) //Not printedobserver.sendNext(2) //Prints 2observer.sendNext(3) //Not printedobserver.sendNext(4) //Print 4 聚集(Aggregating)reduce 用于将一个事件流中的所有值聚集成一个单一的合并后得值，注意只有当输入的流完成时才会得到最后的结果。 12345678910let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()signal .reduce&#123; $0 * $1 &#125; .observeNext&#123; next in print(next) &#125;observer.sendNext(1) //Not printedobserver.sendNext(2) //Not printedobserver.sendNext(3) //Not printedobserver.sendNext(4) //Not printedobserver.sendCompleted() //print 10 collect 将一个事件流的所有值聚合到一个数组中，注意只有当输入的流完成时才会得到最后的结果。 12345678910let (signal, observer) = Signal&lt;Int, NoError&gt;.pipe()signal .collect() .observeNext &#123; next in print(next) &#125;observer.sendNext(1) // nothing printedobserver.sendNext(2) // nothing printedobserver.sendNext(3) // nothing printedobserver.sendCompleted() // prints [1, 2, 3] 合并事件流（Combining event streams）这些操作会合并多个事件流中的值成一个新的、统一的流。 合并最新的值（Combining latest values）combineLatest 方法合并两个事件流最后的值。产生的流将会发送它的第一个值当每一个输入流至少有一个值发送之后，之后，每一个输入流的新值产生一个新值输出。 12345678910111213141516let (numbersSignal, numbersObserver) = Signal&lt;Int, NoError&gt;.pipe()let (lettersSignal, lettersObserver) = Signal&lt;Int, NoError&gt;.pipe()let signal = combineLatest(numbersSignal, lettersSignal)signal.observeNext &#123; next in print(next) &#125;signal.observeCompleted &#123; print(&quot;Completed&quot;) &#125;numbersObserver.sendNext(0) // nothing printednumbersObserver.sendNext(1) // nothing printedlettersObserver.sendNext(&quot;A&quot;) // prints (1, A)numbersObserver.sendNext(2) // prints (2, A)numbersObserver.sendCompleted() // nothing printedlettersObserver.sendNext(&quot;B&quot;) // prints (2, B)lettersObserver.sendNext(&quot;C&quot;) // prints (2, C)lettersObserver.sendCompleted() // prints &quot;Completed&quot;combineLatestWith算子功能相同，不同的是它是一个算子。 压缩（Zipping）zip函数结合两个事件流成一对。任何第N个元组的元素相当于第N个输入流的元素。意思是说输出流的第N个值只有当每个输入流发送了至少N个值之后才会发送。 1234567891011121314let (numbersSignal, numbersObserver) = Signal&lt;Int, NoError&gt;.pipe()let (lettersSignal, lettersObserver) = Signal&lt;String, NoError&gt;.pipe()let signal = zip(numbersSignal, lettersSignal)signal.observeNext &#123; next in print(&quot;Next: \\(next)&quot;) &#125;signal.observeCompleted &#123; print(&quot;Completed&quot;) &#125;numbersObserver.sendNext(0) // nothing printednumbersObserver.sendNext(1) // nothing printedlettersObserver.sendNext(&quot;A&quot;) // prints (0, A)numbersObserver.sendNext(2) // nothing printednumbersObserver.sendCompleted() // nothing printedlettersObserver.sendNext(&quot;B&quot;) // prints (1, B)lettersObserver.sendNext(&quot;C&quot;) // prints (2, C) &amp; &quot;Completed&quot; zipWith算子功能相同，不同之处是它是一个算子。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"算子","slug":"算子","permalink":"http://lionel0806.github.io/blog/tags/算子/"},{"name":"ReactiveCocoa","slug":"ReactiveCocoa","permalink":"http://lionel0806.github.io/blog/tags/ReactiveCocoa/"}]},{"title":"<<自控力>>读书笔记","slug":"blog/自控力读书笔记","date":"2016-05-19T16:00:00.000Z","updated":"2019-06-13T02:50:24.728Z","comments":true,"path":"blog/自控力读书笔记/","link":"","permalink":"http://lionel0806.github.io/blog/自控力读书笔记/","excerpt":"一. 意志力是什么？意志力其实是“我要做”，“我不要”和“我想要”这三种力量。 深入剖析: 更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？ 认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？ 意志力实验: 记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。 5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。当你走神的时候，重新集中注意力。","text":"一. 意志力是什么？意志力其实是“我要做”，“我不要”和“我想要”这三种力量。 深入剖析: 更难的事是什么？想象你正面临一个意志力挑战，更难的事是什么？它为什么这么困难？ 认清两个自我。你的意志力挑战是，如何描述想抗衡的两个自我？冲动的你想要什么？明智的你想要什么？ 意志力实验: 记录你的意志力选择。至少一天，注意观察你做的关于意志力的决定。 5分钟大脑训练冥想。在脑海中默念“呼”和“吸”，把注意力集中在呼吸上。当你走神的时候，重新集中注意力。 二. 意志力的本能：人生来就能抵制奶酪蛋糕的诱惑意志力是种生理本能，它和压力一样，通过不断进化来保护我们不受自身伤害。 深入剖析: 什么是威胁？对你的意志力挑战来说，什么是需要克制的内在冲动？ 压力和自控，试着找出持续一整天或以整周德压力，看看它对你的自控力产生怎样的影响。你有过强烈的欲望吗？你发过脾气吗？你把要做的事拖到明天吗？ 意志力实验: 呼吸出你的自控力。把你的呼吸降到每分钟4～6次，将身体调整到适合自控的生理状态。 5分钟给意志力加油。出门活动，哪怕是只在周围转转，也能减少压力，改善心情，提供动力。 睡眠。打盹和补觉可以消除睡眠不足的影响。 放松能让你恢复意志力储备。躺下，深呼吸，让“放松的生理反应”帮你从自控和压力造成的疲惫中恢复过来。 三. 累到无力抵抗，为什么自控力和肌肉一样有极限？自控力像肌肉一样有极限，自控力用得太多会疲惫，但坚持锻炼能增强自控力。 深入剖析: 意志力的上下波动。 本周，记录你的自控力，特别注意什么时候你的意志力强，什么时候你容易放弃。 你的疲惫感是真的吗？下次你觉得自己太“疲惫”而无法自控的时候，看看自己能不能挺过第一波疲惫，向前迈出一步。 意志力实验: 意志力饮食。确保你的身体摄入了足够的食物，能为你提供足够的能量。 意志力锻炼。本周，选择一件事做（“我想要”的力量）或不做（“我不想”的力量），或者纪录一件你不曾关注的事情，以此锻炼你的“自控力肌肉”。 发现你的“我想要”的力量。发现自己最重要的“我想要”的力量，也就是你脆弱的时候给你力量的东西，每当你面对诱惑，想要放弃的时候，想一想这个东西。 四. 容忍罪恶：为何善行之后会有恶行？当我们将意志力挑战看成衡量道德水平的标准时，善行就会允许我们做坏事，为了能更好的自控，我们要忘掉美德，关注目标和价值观。 深入剖析: 善与恶：当你的意志力挑战成功时，你会不会告诉自己你很“好”，然后允许自己做一些“坏”事。 你是否向明天赊账？你是否会告诉自己明天会弥补今天的过错？如果是这样的话，你是否真的弥补上了？ 光环效应：你是不是看到了坏东西好的一面，如折扣省钱，零脂肪，保护环境？ 你觉得自己是谁？当你想到你的意志力挑战时，你觉得哪部分的你才是“真实”的你？是想追求目标的你，还是需要被控制的你？ 意志力实验: 明天和今天毫无区别，当你想改变行为的时候，试着减小行为的变化性，而不是减少某种行为。 取消许可，牢记理由。下一回，当你发现自己在用曾经的善行为放纵辩护的时候，停下来想一想做“好”事的原因，而不是你应不应该得到奖励。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://lionel0806.github.io/blog/categories/笔记/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://lionel0806.github.io/blog/tags/读书笔记/"}]},{"title":"Xcode-keyboard-shortcuts","slug":"blog/Xcode-keyboard-shortcuts","date":"2016-03-09T16:00:00.000Z","updated":"2019-06-12T16:51:20.000Z","comments":true,"path":"blog/Xcode-keyboard-shortcuts/","link":"","permalink":"http://lionel0806.github.io/blog/Xcode-keyboard-shortcuts/","excerpt":"","text":"Xcode提供很多快捷键，我们不可能都记住，但平时的开发中如果能尽可能多的使用快捷键，效率会提高不少，下面总结了Xcode的一些常用快捷键： 快捷键 功能 星级 command + shift + O 打开搜索窗口 ＊＊＊＊＊ command + 0 显示／隐藏导航区 ＊＊＊＊＊ command + 1~n 选择不同的导航器 ＊＊＊＊ command + option + J 过滤导航结果 ＊＊＊ command + shift + Y 显示／隐藏调试区 ＊＊＊＊ command + option + 0 显示／隐藏实用工具区选项卡 ＊＊＊ command + option + 1~n 切换使用工具区选项卡 ＊＊＊ control + 6 方法跳转菜单 ＊＊＊＊ control + command + Up／Down 对应文件导航 ＊＊＊＊ control + command + Left／Right 查看历史文件 ＊＊＊＊＊ control + command + E 重构符 ＊＊＊＊＊ control + command + J 查看符号来源 ＊＊＊ command + shift + ]／[ 移动到上一个／下一个标签 ＊＊＊＊＊ command + option + ]／［ 整行代码上／下移动 ＊＊＊ command + R 运行应用 ＊＊＊＊＊ command + B 构建应用 ＊＊＊＊＊ control + . 停止运行的应用 ＊＊＊＊＊ control + i 格式化应用 ＊＊＊","categories":[],"tags":[{"name":"Xcode","slug":"Xcode","permalink":"http://lionel0806.github.io/blog/tags/Xcode/"}]},{"title":"如何解决retain cycle","slug":"blog/the-solution-of-retain-cycle","date":"2015-10-27T16:00:00.000Z","updated":"2019-06-13T02:50:06.441Z","comments":true,"path":"blog/the-solution-of-retain-cycle/","link":"","permalink":"http://lionel0806.github.io/blog/the-solution-of-retain-cycle/","excerpt":"","text":"当遇到retain cycle是，一般我们的解决办法是让一个变为weak reference，而选择让那个变成weak reference是个问题。 我们可以把存在retain cycle的两个对象看成是 父－子 关系。 在这个关系当中，父可以拥有子，但是子不可以拥有父，因此，在这个问题中，我们可以把作为 父 的对象定义为strong， 而作为 子 的对象定义为weak，这样就解决了retain cycle。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://lionel0806.github.io/blog/tags/iOS/"}]},{"title":"一个iOS View crash问题","slug":"blog/an-ios-view-crash-error","date":"2015-10-14T16:00:00.000Z","updated":"2019-06-13T02:47:11.854Z","comments":true,"path":"blog/an-ios-view-crash-error/","link":"","permalink":"http://lionel0806.github.io/blog/an-ios-view-crash-error/","excerpt":"","text":"[2015-10-15]用xib做了一个简单的界面，程序启动时会crash掉，xcode error打印信息： Terminating app due to uncaught exception ‘UIViewControllerHierarchyInconsistency’, reason: ‘A view can only be associated with at most one view controller at a time! View &lt;UIView: 0x7f914af22610; frame = (0 0; 414 736); autoresize = W+H; layer = &lt;CALayer: 0x7f914af22980&gt;&gt; is associated with &lt;UIViewController: 0x7f914ae49a90&gt;. Clear this association before associating this view with &lt;TestViewController: 0x7f914ac7f680&gt;.’","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://lionel0806.github.io/blog/tags/iOS/"}]},{"title":"开始使用hexo生成blog","slug":"blog/blog-from-jekyll-to-hexo","date":"2015-10-12T16:00:00.000Z","updated":"2019-06-13T02:48:13.783Z","comments":true,"path":"blog/blog-from-jekyll-to-hexo/","link":"","permalink":"http://lionel0806.github.io/blog/blog-from-jekyll-to-hexo/","excerpt":"","text":"hello, hexo ！","categories":[{"name":"教程","slug":"教程","permalink":"http://lionel0806.github.io/blog/categories/教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://lionel0806.github.io/blog/tags/Hexo/"}]},{"title":"markdown语法","slug":"blog/markdown语法","date":"2015-10-11T16:00:00.000Z","updated":"2019-06-13T02:49:25.155Z","comments":true,"path":"blog/markdown语法/","link":"","permalink":"http://lionel0806.github.io/blog/markdown语法/","excerpt":"","text":"本文转自这里 使用 Markdown 真的可以写出非常整洁的文档来，看到很多人都在使用，自己也忍不住学习了下。网上有很多讲解 markdown 语法的，资料庞大复杂不够简练，学个基础语法置于这么麻烦么。我做了一些整理，保证你学了这些，就可以使用 markdown 去秀文档了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879801、标题：#h1级标题##h2级标题###h3级标题####h4级标题#####h5级标题######h6级标题2、分割线：三个以上的短线 即可作出分割线(需要空行隔开生效)3、超链接：[连接名称](网址 , 标题)[我是链接名](http://www.izhangbo.cn, “我是标题”)[&lt;i class=”icon-refresh”&gt;&lt;/i&gt; 点我刷新](/sonfilename/)另一种超链接写法：[链接名][链接代号][here][3]然后在别的地方定义 3 这个详细链接信息，[3]: http://www.izhangbo.cn “haode”4、键盘键&lt;kbd&gt;Ctrl+[&lt;/kbd&gt; and &lt;kbd&gt;Ctrl+]&lt;/kbd&gt;5、code格式：反引号Use the `printf()` function.“There is a literal backtick (`) here.针对在代码区段内插入反引号的情况“6、强调：*斜体强调***粗体强调**7、图片![Alt text](/path/to/img.jpg “Optional title”)8、上角标这里加个上角标[^stackedit][^stackedit]:角标内容详情9、使用 icon 图标文字&lt;i class=”icon-cog”&gt;&lt;/i&gt;10、段落：以一个空行开始，以一个空行结束，中间的就是一个段落。11、表格：这个稍微有些复杂Item | Value——– | —Computer | $1600Phone | $12Pipe | $112、无序列表：使用 – 加一个空格(需要空行隔开生效)– 无需列表1– 无序列表2– 无序列表313、有序列表：使用 数字 加一个英文句点(需要空行隔开生效)1. 有序列表2. 有序列表3. 有序列表4. 有序列表5. 有序列表14、行缩进：使用 “:加空格”: 这里有个空格，可进行行缩进。15、换行缩进形成代码区块这里先换行，然后缩进4个空格，之后的内容便可以原样显示了，适合用于显示代码内容。直到文本结束或最后一个存在缩进的行为止。16、块引用&gt;给引用的文本开始位置都加一个 ‘&gt;’，&gt;便可组成一个块引用。在块引用中，可以结合&gt;其他markdown元素一块使用，比如列表。&gt;**强调**也可以只在第一行加大于号，其他位置不加。&gt;- 块引用里使用列表，需要和上面的内容隔开一个空行&gt;- 记得加空格哦。如果你要在 markdown 中使用特殊字符，需要对它们进行转义。 如果你对 markdown 的来龙去脉很感兴趣，并参与研究，请移步这里。","categories":[{"name":"教程","slug":"教程","permalink":"http://lionel0806.github.io/blog/categories/教程/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://lionel0806.github.io/blog/tags/markdown/"}]},{"title":"工具","slug":"blog/2015-03-14-tools","date":"2015-10-11T16:00:00.000Z","updated":"2019-06-13T02:46:21.316Z","comments":true,"path":"blog/2015-03-14-tools/","link":"","permalink":"http://lionel0806.github.io/blog/2015-03-14-tools/","excerpt":"","text":"工具 jira:项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域. confluence:企业知识管理与协同软件，也可以用于构建企业wiki。 GitLab:基于Git的开源项目，客用于搭建私有的Github。 Riemann:报警系统，函数式编程语言clojure编写，可配置性强，可以和OpenTSDB等时间序列存贮系统结合，构建企业报警系统。","categories":[{"name":"工具","slug":"工具","permalink":"http://lionel0806.github.io/blog/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://lionel0806.github.io/blog/tags/工具/"}]},{"title":"统一账户管理系统RESTful api设计","slug":"blog/2015-04-10-ldapadmin-design","date":"2015-04-09T16:00:00.000Z","updated":"2019-06-13T02:46:40.852Z","comments":true,"path":"blog/2015-04-10-ldapadmin-design/","link":"","permalink":"http://lionel0806.github.io/blog/2015-04-10-ldapadmin-design/","excerpt":"","text":"LDAPAdmin, 为用户管理提供一组API，以HTTP-based RESTful API的形式提供服务，提供了对ldap数据的增删改查功能。主要用到了HTTP的四种方法：GET， POST， PUT和 DELETE。 下面主要对LDAPAdmin 的REST Api做个简单介绍： ##Functionality ###Terminology ###User stories 利用该组件的HTTP API，通过提交一组描述 用户／部门／系统／管理员的JSON数据，添加、删除、更新、查询数据； 利用该组件的HTTP API，可以方便的添加一条 用户／部门／系统／管理员记录； 利用该组件的HTTP API，可以方便的更新一条指定的 用户／部门／系统／管理员记录； 利用该组件的HTTP API，可以方便的将指定的 用户／部门／系统／管理员删除； ###Scope and Non-Scope ####Scope 用户／部门／系统／管理员 信息相关数据的添加、更新、删除； 查询 用户／部门／系统／管理员的信息； 用户／部门／系统／管理员 的有效性； ###Non-Scope 用户数据的可靠性，数据由管理员负责维护 ##Low-level Design ###Response Code Code Remind Description 200 OK – [GET] 成功返回用户请求的数据 201 CREATED – [POST/PUT] 新建/修改数据成功 204 NO CONTENT – [DELETE] 删除数据成功 400 INVALID REQUEST – [POST/PUT 用户发出请求有误，服务器没有新建/修改数据 401 Unauthorized – [*] token认证失败，token过期等情况 403 Forbidden – [*] 用户认证成功，但没有权限进行相应操作（权限细分） 404 NOT FOUND – [*] 请求的资源（在这里是表、字段不存在等情况） 406 NOT Acceptable – [GET] 用户请求的格式不可得 500 INTERNAL SERVER ERROR – [*] 服务器内部错误，用户无法判断请求是否成功 ###Response| Result #####除了每个响应都携带的返回码和可选的description字段，以下为该API的返回结果（具体形式在每种请求中都有举例）： Method Description GET 返回被查询对象的列表，或为空（查询结果为空） POST 返回是否插入成功（1为成功，0为失败） PUT 返回被修改的行数 DELETE 返回被删除的行数 ###Http methods table ####1.用户HTTP Method|URI|Description:—————|:————–|:————-GET |/v1/user |获取所有用户记录GET |/v1/user/:id |根据id获取记录POST| /v1/user |添加用户记录PUT |/v1/user/:id |修改某个用户记录DELETE| /v1/user/:id |删除某个用户记录 ####2. 部门HTTP Method|URI|Description:——————-|:————–|:————-GET | /v1/department |获取所有部门记录GET | /v1/department/:id |根据id获取部门记录GET | /v1/department/:id?type=subtree |根据id获取该部门下所有的用户和子部门记录POST| /v1/department |添加部门记录PUT | /v1/department/:id |修改某个部门记录DELETE| /v1/department/:id |删除某个部门记录 ####3. 系统HTTP Method|URI|Description:—————|:————–|:————-GET |/v1/system |获取所有组记录GET |/v1/system/:id |根据id获取记录POST| /v1/system |添加组记录PUT |/v1/system/:id |修改某个组记录DELETE| /v1/system/:id |删除某个组记录 ####4. 管理员HTTP Method|URI|Description:—————|:————–|:————-GET | /v1/admin |获取所有管理员记录GET | /v1/admin/:id |根据id获取记录POST| /v1/admin |添加管理员记录PUT | /v1/admin/:id |修改某个管理员记录DELETE| /v1/admin/:id| 删除某个管理员记录 ###Record infomations ####1.用户Response 12345678&#123; &quot;Id&quot;: $&#123;id&#125;, //用户ID &quot;UserName&quot;: $&#123;user name&#125;, //用户名 &quot;Password&quot;: $&#123;password&#125;, //密码 &quot;Department&quot;: $&#123;department&#125;, //所属部门 &quot;Mail&quot;: $&#123;mail&#125;, //邮件 &quot;Telephone&quot;: $&#123;telephone&#125;, //电话&#125; ####2.部门Response 12345&#123; &quot;Id&quot;: $&#123;id&#125;, //部门ID &quot;Name&quot;: $&#123;name&#125;, //部门名 &quot;Parent&quot;, $&#123;parent&#125; //上级部门 &#125; ####3.系统Response 12345&#123; &quot;Id&quot;: $&#123;id&#125;, //组ID &quot;Name&quot;: $&#123;name&#125;, //组名 &quot;Member&quot;, $&#123;member&#125; //成员&#125; ####4. 管理员Response 12345&#123; &quot;Id&quot;: $&#123;id&#125;, //管理员ID &quot;Name&quot;: $&#123;name&#125;, //名字 &quot;Password&quot;, $&#123;password&#125; //密码 &#125; ###RESTful API ####1. 用户 GET /v1/user 此API用于查询所有 用户记录 123456789Request:GET / HTTP/1.1Response:HTTP/1.1 200 OKContent-Type: application/json &#123; &#125; Example下面的示例将查询用户信息 12345678910111213RequestGET /v1/user HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json [ &#123; &#125;, &#123; &#125;, ......] GET /v1/user/:id此API用于查询指定的用户记录 123456789RequestGET /v1/user/:id HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json &#123; &#125; Example下面的示例将查询id为1的用户录 12345678910111213141516RequestGET /v1/user/1 HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json &#123; &quot;code&quot;: 0, &quot;rows&quot;: 1, &quot;result&quot;: [&#123;&quot;id&quot;: &quot;1&quot;, &quot;name&quot;: &quot;xxxx&quot;, &quot;password&quot;: &quot;xxxx&quot;, &quot;department&quot;:[1, 2], &quot;mail&quot;:&quot;xxx@xywy.com&quot;, &quot;telephone&quot;:&quot;15212233445&quot;&#125;]&#125;``` * POST /v1/user此API用于新增 用户记录记录 RequestPOST /v1/user HTTP/1.1Content-Type: application/json { ${Record informations}} ResponseHTTP/1.1 201 CREATEDContent-Type: application/json { “code”:${code}, //type is int “id”: ${id} //type is string, specifing the id inserted, which can be used in querying through the id} 123Example下面的示例将插入 用户记录 RequestPOST /v1/user HTTP/1.1Content-Type: application/json { ${Record informations}} ResponseHTTP/1.1 201 CREATEDContent-Type: application/json { “code”: 0, “id”: 1} 1234 * PUT /v1/user/:id此API用于修改用户记录 RequestPOST /v1/user/:id HTTP/1.1Content-Type: application/json { } ResponseHTTP/1.1 201 CREATEDContent-Type: application/json { “code”:0, “rows”: ${line} //type is int} 12Example下面的示例将修改用户信息 RequestPUT /v1/user/1 HTTP/1.1Content-Type: application/json { } ResponseHTTP/1.1 201 UPDATEDContent-Type: application/json { “code”: 0, “rows”：3} 123* DELETE /v1/user/:id此API用于删除用户记录 RequestDELETE /v1/user/:id{ } ResponseHTTP/1.1 204 NO CONTENTContent-Type: application/json 12Example下面的示例将删除用户记录 RequestDELETE /v1/user/1 HTTP/1.1{ }ResponseHTTP/1.1 204 NO CONTENT 12345 2. 部门 * GET /v1/department 此API用于查询所有部门记录 RequestGET /v1/department HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json { ${Record informentions}} 12Example下面的示例将查询部门信息 RequestGET /v1/department HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json [ { }, { }, ……] 123 * GET /v1/department/:id此API用于查询指定的部门记录 RequestGET /v1/department/:id HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json { } 123Example下面的示例将查询id为1的部门记录 RequestGET /v1/department/1 HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json { “code”: 0, “rows”: 1, “result”: [{“id”: “1”, “name”: “zonghezhikongzhongxin”, “parent”: “”]} 123 * GET /v1/department/:id?type=subtree此API用于查询指定的部门的所有子用户和子部门记录（树形结构） RequestGET /v1/department/:id?type=subtree HTTP/1.1ResponseHTTP/1.1 200 OKContent-Type: application/json { } 123Example下面的示例将查询id为1的部门的详细信息（包括子部门和用户）记录 RequestGET /v1/department/1?type=subtree HTTP/1.1 ResponseHTTP/1.1 200 OKContent-Type: application/json { “code”: 0, “rows”: 1, “result”: { “user”:[ {“id”: 1, “name”: “xxxx”, “department”:[1], “mail”:”xxxx@xywy.com“, “telephone”:”xxxxx”}, {“id”: 2, “name”: “xxxxx”,”department”:[1, 2], “mail”:”xxxxx@xywy.com“, “telephone”:”xxxxx”}, …… ] “department”:[ {“id”: 1 “name”:”sa”, “parent”:1}, { “ id”: 1, “name” : “anquan”, “parent” : 1 } …… ] } 123 * POST /v1/department此API用于新增 部门记录 RequestPOST /v1/department HTTP/1.1Content-Type: application/json { ${Record informations}} ResponseHTTP/1.1 201 CREATEDContent-Type: application/json { “code”:${code}, //type is int “id”: ${id} //type is string, specifing the id inserted, which can be used in querying through the id} 123Example下面的示例将插入部门记录 RequestPOST /v1/department HTTP/1.1Content-Type: application/json { ${Record informations}} ResponseHTTP/1.1 201 CREATEDContent-Type: application/json { “code”: 0, “id”: 1} 123 * PUT /v1/department/:id此API用于修改部门记录 RequestPOST /v1/department/:id HTTP/1.1Content-Type: application/json { } ResponseHTTP/1.1 201 CREATEDContent-Type: application/json { “code”:0, “rows”: ${line} //type is int} 123Example下面的示例将修改ID为1的部门信息 RequestPUT /v1/department/1 HTTP/1.1Content-Type: application/json { } ResponseHTTP/1.1 201 UPDATEDContent-Type: application/json { “code”: 0, “rows”：3} 123 * DELETE /v1/department/:id此API用于删除部门记录 RequestDELETE /v1/department/:id{ } ResponseHTTP/1.1 204 NO CONTENTContent-Type: application/json 123Example下面的示例将删除部门记录 RequestDELETE /v1/department/1 HTTP/1.1{ } ResponseHTTP/1.1 204 NO CONTENT ###3. 系统／管理员 与 用户Api很类似，只是URI稍有不同 ####系统： /v1/system ####管理员： /v1/admin 返回记录信息在 Record informations中有说明。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"RESTFul API","slug":"RESTFul-API","permalink":"http://lionel0806.github.io/blog/tags/RESTFul-API/"}]},{"title":"关于sizeof","slug":"blog/2014-07-09-about-sizeof","date":"2014-07-08T16:00:00.000Z","updated":"2019-06-13T02:46:04.053Z","comments":true,"path":"blog/2014-07-09-about-sizeof/","link":"","permalink":"http://lionel0806.github.io/blog/2014-07-09-about-sizeof/","excerpt":"","text":"前两天犯了一个愚蠢的错误，由于对sizeof理解的错误，导致代码出现了一个bug,具体代码逻辑如下： char buf[512]; char *ptr; int size; ptr = buf; size = sizeof(ptr);本来是计算buf的大小，但这样写其实只是得到 char指针类型的大小，错误的以为ptr指向buf时，用sizeof获取的也是buf的大小。通过了解，如果sizeof的操作数为指针时，不管指针指向什么类型，值都是指针类型的大小，32位系统为4.具体sizeof的结果如下： 1、当操作数为数据类型时，所得结果为给数据类型的大小。如：32bit系统上，sizeof（char）＝ 1 ，sizeof（int） ＝ 4。 2、当操作数是指针时，sizeof依赖于编译器。例如Microsoft C/C++7.0中，near类指针字节数为2，far、huge类指针字节数为4。一般Unix的指针字节数为4。 3、当操作数具有数组类型时，其结果是数组的总字节数。 4、联合类型操作数的sizeof是其最大字节成员的字节数。结构类型操作数的sizeof是这种类型对象的总字节数，包括任何垫补在内。 让我们看如下结构： struct { char b; double x; } a; 在某些机器上sizeof（a）=12，而一般sizeof（char）+ sizeof（double）= 9。 这是因为编译器在考虑对齐问题时，在结构中插入空位以控制各成员对象的地址对齐。如double类型的结构成员x要放在被4整除的地址。 5、如果操作数是函数中的数组形参或函数类型的形参，sizeof给出其指针的大小。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"内存","slug":"内存","permalink":"http://lionel0806.github.io/blog/tags/内存/"},{"name":"c语言","slug":"c语言","permalink":"http://lionel0806.github.io/blog/tags/c语言/"}]},{"title":"安装archlinux","slug":"blog/2014-04-26-install-archlinux","date":"2014-04-25T16:00:00.000Z","updated":"2019-06-13T02:45:56.226Z","comments":true,"path":"blog/2014-04-26-install-archlinux/","link":"","permalink":"http://lionel0806.github.io/blog/2014-04-26-install-archlinux/","excerpt":"","text":"活着就是为了折腾，Ubuntu已经用了4年多了吧，从最近几年看来，ubuntu的发展目的是要面向大众化，由于要适合大众，所以他的操作更简单，图形界面更美观，这就导致它越来越笨重。对于一个追求速度，喜欢命令模式的程序猿，ubuntu已然不能满足我的要求，所以安装archlinux的想法产生了，活着不就是为了折腾嘛，于是一步一步定制专属自己的linux系统。 1.下载archlinux镜像文件2.制作usb安装盘 # dd bs=4M if=&lt;/archlinux-2014.04.01-dual.iso/的/路径&gt; of=/dev/&lt;U盘文件&gt; &amp;&amp; sync3.从U盘启动选择Boot Arch Linux4.配置安装 1)连接网络 有线连接： # dhcpcd 无线连接： # wifi-menu ADSL 宽带连接： 配置： # pppoe-setup 连接： # systemctl start adsl 2)选择软件源 # vi /etc/pacman.d/mirrorlist 更新本地数据库： # pacman -Syy5.分区 1)分区方案： $ lsblk /dev/sda -o NAME,FSTYPE,SIZE,MOUNTPOINT NAME FSTYPE SIZE MOUNTPOINT sda 120G ├─sda1 ext4 36G / ├─sda2 ext4 80G /home └─sda3 swap 4G [SWAP] 注意：swap分区大小建议等于或两倍于内存。 2)分区： MBR 分区： # cfdisk /dev/sda GPT 分区： # cgdisk /dev/sda6.创建文件系统： 创建 ext4 分区： # mkfs.ext4 /dev/sda1 # mkfs.ext4 /dev/sda2 创建并激活 swap 分区： # mkswap /dev/sda3 # swapon /dev/sda37.系统安装 1)挂载分区： 挂在 / 分区： # mount /dev/sda? /mnt 挂在home分区： # mkdir /mnt/home # mount /dev/sda? /mnt/home 2)安装基础系统： # pacstrap -i /mnt base 3)生成fstab # genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab8.进入新系统 # arch-chroot /mnt /bin/bash9.配置local 1）编辑/etc/locale.gen，移除需要的行前的 #： # vi /etc/locale.gen 简体中文用户，可移除下列行前的 # ： #zh_CN.UTF-8 UTF-8 2)更新设置： # locale-gen 3)设置默认语言 # echo LANG=&lt;语言&gt; &gt; /etc/locale.conf 4)简体中文用户可执行： # echo LANG=zh_CN.UTF-8 &gt; /etc/locale.conf 5)时区 查看时区： 时区： # ls /usr/share/zoneinfo/ 子时区： # ls /usr/share/zoneinfo/&lt;时区&gt;/ 设置时区： # ln -s /usr/share/zoneinfo/&lt;时区&gt;/&lt;子时区&gt; /etc/localtime 中国大陆用户可执行： # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 6)硬件时间： 推荐）使用UTC时间： # hwclock --systohc --utc 使用本地时间： !__ 使用本地时间可能会引起某些不可修复的bug。 # hwclock --systohc --localtime10.创建 ramdisk 环境 （可选）配置 # vi /etc/mkinitcpio.conf 创建： # mkinitcpio -p linux11.为 root 用户设置密码 # passwd 安装Grub引导器 1)安装 BIOS + MBR： # pacman -S grub # grub-install --target=i386-pc --recheck /dev/sda 2）生成配置文件： # grub-mkconfig -o /boot/grub/grub.cfg 3）欲引导其他系统，如 Windows ，可执行： # pacman -S os-prober # grub-mkconfig -o /boot/grub/grub.cfg 退出安装环境 退回安装环境 # exit卸载新分区 # umount -R /mnt重启 # reboot 用户管理 1）添加一个典型的桌面用户： # useradd -m -g users -G wheel -s /bin/bash &lt;用户名&gt; 2）设置密码： # passwd &lt;用户名&gt; 4)配置 sudo: 安装 sudo： # pacman -S sudo 配置： # EDITOR=nano visudo 反注释该行（删去 # ）： # %wheel ALL=(ALL) ALL 5)将允许获取 root 权限的用户加入 wheel 用户组（若用户已在该组则跳过） # gpasswd -a &lt;用户名&gt; wheel 6)使用 sudo 时，在输入 &lt;命令&gt; 部分 Tab 补全会失效。如需启用 sudo 的 Tab 补全，执行： $ sudo pacman -S bash-completion $ echo complete -cf sudo &gt;&gt; ~/.bashrc 15.声音管理 1)安装 alsa-utils # pacman -S alsa-utils 2)配置： # alsamixer 配置 GUI（图形用户界面） 1) 安装显卡驱动: 确定显卡型号： $ lspci | grep VGA 对应可选驱动包： Intel 显卡：xf86-video-intel nVidia 显卡： GeForce 7 以上：xf86-video-nouveau；nvidia GeForce 6/7：xf86-video-nouveau；nvidia-304xx AMD/ATI 显卡：xf86-video-ati；AMD Catalyst（Arch Wiki） 安装驱动： # pacman -S &lt;驱动包&gt; 2) 安装 X 窗口系统: X 窗口系统（X11/X）是诸多桌面环境的基础。 安装 Xorg Server # pacman -S xorg-server xorg-server-utils xorg-xinit 添加3D支持 # pacman -S mesa 添加触摸板支持 # pacman -S xf86-input-synaptics 安装字体 （推荐）Dejavu和文泉驿-微米黑： # pacman -S ttf-dejavu wqy-microhei 安装桌面环境 Arch Linux 官方提供支持的桌面环境：Cinnamon（官网）：cinnamonEnlightenment（官网）：enlightenment17GNOME（官网)：gnome、gnome-extra（附加功能包）KDE（官网)：kde（完全版）、kdebase（基础版）、kde-l10n-zh_cn（简体中文包）LXDE（官网)：lxde。Xfce（官网)：xfce4、xfce4-goodies（附加功能包）其他桌面环境：Arch Wiki更加轻量级的窗口管理器：：Arch Wiki 安装： # pacman -S &lt;桌面环境组&gt; 启动桌面环境 启动方式有两种：从命令行以 startx 启动；使用显示管理器（Display Manager）。 startx：（以GNOME为例） 配置： $ cp /etc/skel/.xinitrc ~ $ vi ~/.xinitrc反注释对应行： # exec gnome-session启动： $ startx显示管理器：（以GDM为例）从命令行启动： # systemctl start gdm.service随系统启动： # systemctl enable gdm.service 安装输入法 fcitx： 安装： # pacman -S fcitx-im配置： export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=&quot;@im=fcitx&quot;KDM、GDM、LightDM 等显示管理器的用户，向 ~/.xprofile添加以上内容。使用 startx 或 slim 的用户，向 ~/.xinitrc 添加以上内容。为在GNOME上使用fcitx，需禁用iBus： $ gsettings set org.gnome.settings-daemon.plugins.keyboard active false AUR（Arch 用户软件仓库） Arch Linux预设几个软件仓库中可能没有用户需要的软件包。遇到这种情况时，可上AUR检索。AUR是是为用户而建、由用户主导的Arch软件仓库。AUR中的软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，并由官方定期从中挑选软件包进入[community]仓库。Yaourt是由社区编写的脚本，方便用户从AUR上获取需要的软件。以下介绍Yaourt的安装和使用。 1) 安装 Yaourt并不在官方软件源中，除从AUR中安装，还可通过第三方软件源进行安装： 添加软件源： 将下列内容添加至 /etc/pacman.conf ： 源1： [archlinuxfr] SigLevel = Never Server = http://repo.archlinux.fr/$arch源2（Arch Linux CN 友情提供 :) ）： [archlinuxcn] SigLevel = Never Server = http://repo.archlinuxcn.org/$arch安装： # pacman -Sy base-devel yaourt2) 使用 Yaourt 可以安装来自官方源的软件： $ yaourt &lt;软件名&gt;更新所有包（包括来自官方源的包）： $ yaourt -Syua搜索： $ yaourt &lt;关键字&gt;","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"http://lionel0806.github.io/blog/tags/archlinux/"}]},{"title":"关于开源软件redis","slug":"blog/2014-04-04-about-redis","date":"2014-04-03T16:00:00.000Z","updated":"2019-06-13T02:45:36.539Z","comments":true,"path":"blog/2014-04-04-about-redis/","link":"","permalink":"http://lionel0806.github.io/blog/2014-04-04-about-redis/","excerpt":"","text":"最近读redis代码，redis是一个key-value存储系统,详情请看官网介绍redis，仅2万多行代码，实现如此强大的功能，真是让人不由的惊叹！而且代码是非常之漂亮, 《redis设计与实现》可以帮助你了解redis的具体实现，redis的github地址。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"开源","slug":"开源","permalink":"http://lionel0806.github.io/blog/tags/开源/"},{"name":"redis","slug":"redis","permalink":"http://lionel0806.github.io/blog/tags/redis/"}]},{"title":"横琴岛游记","slug":"blog/2014-03-24-cycling-to-hengqin","date":"2014-03-23T16:00:00.000Z","updated":"2019-06-13T02:45:20.304Z","comments":true,"path":"blog/2014-03-24-cycling-to-hengqin/","link":"","permalink":"http://lionel0806.github.io/blog/2014-03-24-cycling-to-hengqin/","excerpt":"","text":"每次游玩回来，或多或少总会有那么一些感想,而这次感触颇深，也许与我最近的心情有关吧。从小到大，语文一直不好，因此而没少挨老师的批，以至于现在坐在电脑前想写点东西的时候，总感觉缺少一些词藻，把心里的想法和感受用语言这种奇怪的东西表达出来。犹豫了许久，决定还是把它记下来吧，也许二十年、三十年或者更老，记不起事的时候翻出来看看，也许能勾起对年轻时的回忆,也不失为一件美好的事！再说对于我这种记性不是很好的动物来说,记下来总归是安全的。 最近心情一直不怎么好，可能是这段时间工作上的事少，我这人有点贱，一闲下来就有点不淡定，容易想一些乱七八糟的事情，一想就郁闷。什么结婚啊、买房啊，最近听这些话题太多太多了,听多了不由的让人不想啊,唉！平时由于工作忙，没有太多时间去想这些,其实我压根不愿意想去这些事情，总抱着一种该来的总会来的态度。 昨天一同事说打算骑自行车去横琴岛玩，问我去不去，想了想去就去呗，反正也没啥坏处，还可以锻炼下身体，减减肥肉，说不定还会有一些意外的收获，何乐而不为。就是可怜了我那坐骑,跟随了我大半年时间，最近老是咯吱咯吱响，不知道还能不能坚持下来，要是在半路上罢工，那就麻烦啦。 早上十点从家里出发，路边随便买了点早餐，按照提前约好的时间来到华发广场集合，一行总共六人。天气特给力，不冷不热，偶尔还有点微风，真是出去玩的好时间。蹬着单车，微风从脸颊吹过，那感觉就一个字“爽”！有点可惜的是自行车后刹车不灵，一路上不敢骑太快，单怕和那些奔驰宝马亲吻一下。 大约两个小时，到了横琴，又累又饿，也到了午饭的时候，路边找了家快餐店，随便点了份快餐和一杯奶茶，我勒个去，奶茶杯怎么那么旧，感觉很脏似的，不过那快餐还是蛮好吃的，或许是饿了的缘故吧，大家狼吞虎咽地几下吃完了，然后稍微坐了一会，又开始出发了，直奔海边。 沿着海边有一条很长的水泥路，两边有护栏，路很平坦，毫无遮挡,一路飞奔,真是爽歪了! 到了海边，大家一起合了个影，帮我们照相的是一中年大叔，那大叔蛮有意思，照完之后他拿着我手机摆出个姿势，示意要扔给我，我还以为这大叔发疯了,急忙一边跑一边喊“别别别，我接不住”，后来大叔笑着给我手机，说“我跟你开个玩笑而已，我怎么会扔呢”，呵呵,是我想多了.在海边碰到一小伙，跟我年龄差不多，聊了几句，说是专门过来看海，却没看到蓝色的大海，有点遗憾。卷起裤腿,跑到水里时,突然一个浪过来,悲剧啊,裤子全湿了.在海边,微风吹过,听着海浪的声音,心情一下子舒畅了好多，所有负担、所有不愉快的事统统抛到九霄云外,全身感觉格外的轻松!要是再有一个心爱的姑娘一起,那就完美了. 转眼四点多了,该回去了,我们没有原路返回,本来打算找一条近路,结果长隆隧道不让自行车走,我去,摩托车让通过,就是不让自行车走,要我说直接冲过去得类,反正那守卫也没有车,肯定追不上.可另外一哥们太谨慎了,不同意.我们只好再寻找路线了.接着就悲剧更悲剧了,一路上都在修路,坑坑洼洼还是小事,关键土太厚了,一辆大车过去,整个人感觉被土埋了,人没老,头发先变白了.有种回到老家的感觉.这一路就不太爽了,坑坑洼洼的人家新车可以很轻松的骑过去,我那破车咋整也骑不快,一路他们一直都在等我,搞得我都有些不好意思,更不幸的是不小心摔到,腿上刮掉一层皮,还好,谁叫咱是土生土长的农村人,这点小伤算个屁,站起来拍拍屁股继续走着. 晚上八点多才到市区,大家都饿坏了,突然路边冒出一家酱饼小摊,刚出锅的实在是太好吃了,没想到珠海还有这货,真是太让人意外了,想想还是在大学时吃过,差不多两年没见过这玩意了.最后找了家饭馆,吃完饭各回各家,该干嘛干嘛! 回到家坐下来想想,这次出去还是蛮有意思的.我想当时如果不去的话,这一天就在家睡觉啊什么的,同样会过去,然后感叹,唉!周末就这样过去了.人生也一样,不能老是处在当时没做,过了后悔这种无限循环中.跟着心走,想做就做,这样即使到死的时候,也不会因当初错过而后悔. 横琴. 海边集体照. 海浪. 回去的路上.","categories":[{"name":"生活","slug":"生活","permalink":"http://lionel0806.github.io/blog/categories/生活/"}],"tags":[{"name":"自行车","slug":"自行车","permalink":"http://lionel0806.github.io/blog/tags/自行车/"},{"name":"游记","slug":"游记","permalink":"http://lionel0806.github.io/blog/tags/游记/"}]},{"title":"nginx编译报错","slug":"blog/2014-04-10-install-nginx-on-ubuntu","date":"2014-03-23T16:00:00.000Z","updated":"2019-06-13T02:45:47.030Z","comments":true,"path":"blog/2014-04-10-install-nginx-on-ubuntu/","link":"","permalink":"http://lionel0806.github.io/blog/2014-04-10-install-nginx-on-ubuntu/","excerpt":"","text":"在ubuntu(32bit)上安装nginx执行configure时遇到错误如下： ./configure: error: the HTTP rewrite module requires the PCRE library. You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre=&lt;path&gt; option.貌似缺少pcre库，在网上搜了，说是需要安装pcre-devel,可是ubuntu上安装是找不到pcre-devel。可能是名字变了，后来终于找到解决办法，需要安装 libpcre3 libpcre3-dev： # sudo apt-get install libpcre3 libpcre3-dev","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://lionel0806.github.io/blog/tags/nginx/"}]},{"title":"内存死机问题","slug":"blog/2014-03-10-crash-about-memory","date":"2014-03-09T16:00:00.000Z","updated":"2019-06-13T02:44:59.609Z","comments":true,"path":"blog/2014-03-10-crash-about-memory/","link":"","permalink":"http://lionel0806.github.io/blog/2014-03-10-crash-about-memory/","excerpt":"","text":"最近遇到一个内存导致死机的问题，这种问题总是让人很恼火。 Mstar linux方案，由于对指针的检测不够完善，导致使用了空指针。一个问题整了我一天多时间，最后查出来尽然是珠海有线的码流里边有一个bouquet id是 -256，而代码里边没有处理到这种情况，获取到空指针，而在使用的时候又没有检测。幸亏有gdb可以用，可以定位到是那个模块出了问题。完了想想本来这个问题要不了那么长时间，一开始感觉这个变量有点问题，可就被脑子里那种 “不可能这儿出问题啊”的想法打消了，也许很多程序员会犯这种错误，总是很确信的说”这个不可能”，难道这个真的不可能吗？其实自己也不知道，不知道从哪儿来的这种莫名其妙的自信。由这个问题想到： 1)不要轻易做任何假设，负责可能会影响你做出准确的判断。 2)时时刻刻在使用指针时要检测是否为空，这个构建健壮软件的必要条件。 3)要让程序能经得起一些意味发生的情况，比如获取到错误变量等。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"bug","slug":"bug","permalink":"http://lionel0806.github.io/blog/tags/bug/"},{"name":"内存","slug":"内存","permalink":"http://lionel0806.github.io/blog/tags/内存/"},{"name":"死机","slug":"死机","permalink":"http://lionel0806.github.io/blog/tags/死机/"}]},{"title":"Hello World","slug":"blog/hello-world","date":"2014-03-01T16:00:00.000Z","updated":"2019-06-13T02:48:37.470Z","comments":true,"path":"blog/hello-world/","link":"","permalink":"http://lionel0806.github.io/blog/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"教程","slug":"教程","permalink":"http://lionel0806.github.io/blog/categories/教程/"}],"tags":[]},{"title":"提问的智慧","slug":"blog/2014-03-02-smart-questions","date":"2014-03-01T16:00:00.000Z","updated":"2019-06-13T02:44:49.957Z","comments":true,"path":"blog/2014-03-02-smart-questions/","link":"","permalink":"http://lionel0806.github.io/blog/2014-03-02-smart-questions/","excerpt":"","text":"作为一个技术人员，在学习和工作中，经常会遇到各种各样的问题，有时候我们没法解答的时候？也许最好的办法就是去求助与他人，不管是通过网络，还是面对面的方式。 于是如何问问题就变的尤为重要，下面这篇How to Ask Questions The Smart Way会给你答案，相信看完之后你会有很大收获。","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"提问","slug":"提问","permalink":"http://lionel0806.github.io/blog/tags/提问/"}]},{"title":"开始我的博客之旅","slug":"blog/2014-02-26-startup-my-blog","date":"2014-02-25T16:00:00.000Z","updated":"2019-06-13T02:44:11.279Z","comments":true,"path":"blog/2014-02-26-startup-my-blog/","link":"","permalink":"http://lionel0806.github.io/blog/2014-02-26-startup-my-blog/","excerpt":"","text":"目的 有人曾说，其实每个人都有好的想法，只是我们当中的大多数人不善于跟踪它而已，此博客主要记录平时的一些想法，一些技术问题以及分享一切美好的人和事… 为什么使用 github pages &amp; jekyll 来创建博客 昨天突然兴起，想创建一个属于自己的博客，于是就在google上搜索如何创建自己博客之类的话题， 搜到一篇写的非常详细的博文 搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门，免费而且无限流量，太符合我的需求了（是不是有点贱），于是就有了此博。 主题此博客的主题是在Michael Rose的 Minimal Mistakes主题的基础上修改的，在此感谢Michael Rose！","categories":[{"name":"技术","slug":"技术","permalink":"http://lionel0806.github.io/blog/categories/技术/"}],"tags":[{"name":"jekyll","slug":"jekyll","permalink":"http://lionel0806.github.io/blog/tags/jekyll/"},{"name":"博客","slug":"博客","permalink":"http://lionel0806.github.io/blog/tags/博客/"}]}]}